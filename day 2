*STATIC BLOCK: A  static block (also known as a static initialization block) is a block of code in Java that is used to initialize static variables or perform operations that need to be run once when the class is first loaded into memory.
ex:
  
class MyClass {
    static {
        System.out.println("Static block executed.");
    }

    public static void main(String[] args) {
        System.out.println("Main method executed.");
    }
}

  using static keyword, static block will be created and it is a single ton block

  **STATIC METHOD: for static method,no need to create object static will act as instance for object and using class name you can call static method


  ex:
    class Animal {
    static void eat() {
        System.out.println("Animal is eating");
    }
}

class Dog extends Animal {
    static void eat() {
        System.out.println("Dog is eating");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal.eat();  
        Dog.eat();     
    }
}
output:Animal is eating
Dog is eating

"Constructor: Initializing an object,  Initializing which means you are calling the default constructor to create objects."
  ex:class Animal {
    String name;

    // Default constructor
    Animal() {
        name = "Unknown";
        System.out.println("Animal is created.");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal animal = new Animal();  // Calls the default constructor
        System.out.println("Name: " + animal.name);
    }
}

  Conditional statements in Java allow you to execute a block of code based on a specific condition. The types of conditional statements in Java are:

if statement

if-else statement

if-else if-else statement

    ex: if statement 
    public class Main {
    public static void main(String[] args) {
        int num = 10;

        // if statement
        if (num > 5) {
            System.out.println("Number is greater than 5");
        }
    }
}
2. if-else statements 
  public class Main {
    public static void main(String[] args) {
        int num = 2;

        // if-else statement
        if (num > 5) {
            System.out.println("Number is greater than 5");
        } else {
            System.out.println("Number is less than or equal to 5");
        }
    }
}
3. if else if else statement:
  public class Main {
    public static void main(String[] args) {
        int num = 8;

        // if-else if-else statement
        if (num > 10) {
            System.out.println("Number is greater than 10");
        } else if (num == 8) {
            System.out.println("Number is equal to 8");
        } else {
            System.out.println("Number is less than 8");
        }
    }
}

**Fibonacci Series:The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. It typically starts with 0 and 1.

Fibonacci Sequence Definition:
F(0) = 0

F(1) = 1

F(n) = F(n-1) + F(n-2) for n â‰¥ 2

  class main {
  public static void main(String[] args ){
    int a= 0;
    int b= 0;
    System.out.println(a);
    System.out.println(b);
    for(int i=2;i<5;i++){
      int c = a+b;
      System.out.println(c);
      a=b;
      b=c;
    }
      
  }
}

**Factorial Method 
  
  class main {
  public static void main(String[] args ){
    int fact=1;
    
    for(int i=2;i<5;i++){
      fact=fact*1;
    }
      System.out.println(fact);
      
  }
}

**To print a 'Z' pattern using stars (*) in Java, we need to print:

A full row of stars at the top

A diagonal from top-right to bottom-left

A full row of stars at the bottom
  
public class Main {
    public static void main(String[] args) {
        int n = 5; 

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || i == n - 1) {
                    System.out.print("*");
                }
                else if (j == n - i - 1) {
                    System.out.print("*");
                } 
                else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}

**  
